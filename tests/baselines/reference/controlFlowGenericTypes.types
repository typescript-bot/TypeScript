=== tests/cases/conformance/controlFlow/controlFlowGenericTypes.ts ===
function f1<T extends string | undefined>(x: T, y: { a: T }, z: [T]): string {
>f1 : <T extends string | undefined>(x: T, y: {    a: T;}, z: [T]) => string
>x : T
>y : { a: T; }
>a : T
>z : [T]

    if (x) {
>x : T

        x;
>x : T

        x.length;
>x.length : number
>x : string
>length : number

        return x;
>x : string
    }
    if (y.a) {
>y.a : T
>y : { a: T; }
>a : T

        y.a.length;
>y.a.length : number
>y.a : string
>y : { a: T; }
>a : string
>length : number

        return y.a;
>y.a : string
>y : { a: T; }
>a : string
    }
    if (z[0]) {
>z[0] : T
>z : [T]
>0 : 0

        z[0].length;
>z[0].length : number
>z[0] : string
>z : [T]
>0 : 0
>length : number

        return z[0];
>z[0] : string
>z : [T]
>0 : 0
    }
    return "hello";
>"hello" : "hello"
}

function f2<T>(x: Extract<T, string | undefined> | null): string {
>f2 : <T>(x: Extract<T, string | undefined> | null) => string
>x : Extract<T, string | undefined> | null
>null : null

    if (x) {
>x : Extract<T, string | undefined> | null

        x;
>x : Extract<T, string | undefined>

        x.length;
>x.length : number
>x : string
>length : number

        return x;
>x : string
    }
    return "hello";
>"hello" : "hello"
}

interface Box<T> {
    item: T;
>item : T
}

declare function isBox(x: any): x is Box<unknown>;
>isBox : (x: any) => x is Box<unknown>
>x : any

declare function isUndefined(x: unknown): x is undefined;
>isUndefined : (x: unknown) => x is undefined
>x : unknown

declare function unbox<T>(x: Box<T>): T;
>unbox : <T>(x: Box<T>) => T
>x : Box<T>

function g1<T extends Box<T> | undefined>(x: T) {
>g1 : <T extends Box<T> | undefined>(x: T) => void
>x : T

    if (isBox(x)) {
>isBox(x) : boolean
>isBox : (x: any) => x is Box<unknown>
>x : Box<T> | undefined

        unbox(x);
>unbox(x) : T
>unbox : <T>(x: Box<T>) => T
>x : Box<T>
    }
}

function g2<T extends Box<T> | undefined>(x: T) {
>g2 : <T extends Box<T> | undefined>(x: T) => void
>x : T

    if (!isUndefined(x)) {
>!isUndefined(x) : boolean
>isUndefined(x) : boolean
>isUndefined : (x: unknown) => x is undefined
>x : Box<T> | undefined

        unbox(x);
>unbox(x) : T
>unbox : <T>(x: Box<T>) => T
>x : Box<T>
    }
}

function g3<T extends Box<T> | undefined>(x: T) {
>g3 : <T extends Box<T> | undefined>(x: T) => void
>x : T

    if (!isBox(x)) {
>!isBox(x) : boolean
>isBox(x) : boolean
>isBox : (x: any) => x is Box<unknown>
>x : Box<T> | undefined

        unbox(x);  // Error
>unbox(x) : T
>unbox : <T>(x: Box<T>) => T
>x : undefined
    }
}

function g4<T extends Box<T> | undefined>(x: T) {
>g4 : <T extends Box<T> | undefined>(x: T) => void
>x : T

    if (isUndefined(x)) {
>isUndefined(x) : boolean
>isUndefined : (x: unknown) => x is undefined
>x : Box<T> | undefined

        unbox(x);  // Error
>unbox(x) : unknown
>unbox : <T>(x: Box<T>) => T
>x : undefined
    }
}

// Repro from #13995

declare function takeA(val: 'A'): void;
>takeA : (val: 'A') => void
>val : "A"

export function bounceAndTakeIfA<AB extends 'A' | 'B'>(value: AB): AB {
>bounceAndTakeIfA : <AB extends "A" | "B">(value: AB) => AB
>value : AB

    if (value === 'A') {
>value === 'A' : boolean
>value : AB
>'A' : "A"

        takeA(value);
>takeA(value) : void
>takeA : (val: "A") => void
>value : "A"

        return value;
>value : AB
    }
    else {
        return value;
>value : AB
    }
}

// Repro from #13995

type Common = { id: number };
>Common : Common
>id : number

type AA = { tag: 'A', id: number };
>AA : AA
>tag : "A"
>id : number

type BB = { tag: 'B', id: number, foo: number };
>BB : BB
>tag : "B"
>id : number
>foo : number

type MyUnion = AA | BB;
>MyUnion : MyUnion

const fn = (value: MyUnion) => {
>fn : (value: MyUnion) => void
>(value: MyUnion) => {    value.foo;  // Error    if ('foo' in value) {        value.foo;    }    if (value.tag === 'B') {        value.foo;    }} : (value: MyUnion) => void
>value : MyUnion

    value.foo;  // Error
>value.foo : any
>value : MyUnion
>foo : any

    if ('foo' in value) {
>'foo' in value : boolean
>'foo' : "foo"
>value : MyUnion

        value.foo;
>value.foo : number
>value : BB
>foo : number
    }
    if (value.tag === 'B') {
>value.tag === 'B' : boolean
>value.tag : "A" | "B"
>value : MyUnion
>tag : "A" | "B"
>'B' : "B"

        value.foo;
>value.foo : number
>value : BB
>foo : number
    }
};

const fn2 = <T extends MyUnion>(value: T): MyUnion => {
>fn2 : <T extends MyUnion>(value: T) => MyUnion
><T extends MyUnion>(value: T): MyUnion => {    value.foo;  // Error    if ('foo' in value) {        value.foo;    }    if (value.tag === 'B') {        value.foo;    }} : <T extends MyUnion>(value: T) => MyUnion
>value : T

    value.foo;  // Error
>value.foo : any
>value : MyUnion
>foo : any

    if ('foo' in value) {
>'foo' in value : boolean
>'foo' : "foo"
>value : T

        value.foo;
>value.foo : number
>value : BB
>foo : number
    }
    if (value.tag === 'B') {
>value.tag === 'B' : boolean
>value.tag : "A" | "B"
>value : MyUnion
>tag : "A" | "B"
>'B' : "B"

        value.foo;
>value.foo : number
>value : BB
>foo : number
    }
};

// Repro from #13995

type A1 = {
>A1 : A1

    testable: true
>testable : true
>true : true

    doTest: () => void
>doTest : () => void
}
type B1 = {
>B1 : B1

    testable: false
>testable : false
>false : false

};

type Union = A1 | B1
>Union : Union

function notWorking<T extends Union>(object: T) {
>notWorking : <T extends Union>(object: T) => void
>object : T

    if (!object.testable) return;
>!object.testable : boolean
>object.testable : boolean
>object : Union
>testable : boolean

    object.doTest();
>object.doTest() : void
>object.doTest : () => void
>object : A1
>doTest : () => void
}

// Repro from #42939

interface A {
    a: number | null;
>a : number | null
>null : null

};

function get<K extends keyof A>(key: K, obj: A): number {
>get : <K extends "a">(key: K, obj: A) => number
>key : K
>obj : A

    const value = obj[key];
>value : A[K]
>obj[key] : A[K]
>obj : A
>key : K

    if (value !== null) {
>value !== null : boolean
>value : A[K]
>null : null

        return value;
>value : number
    }
    return 0;
>0 : 0

};


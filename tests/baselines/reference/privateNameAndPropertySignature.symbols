=== tests/cases/conformance/classes/members/privateNames/privateNameAndPropertySignature.ts ===
type A = {
>A : Symbol(A, Decl(privateNameAndPropertySignature.ts, 0, 0))

    #foo: string
>#foo : Symbol(#foo, Decl(privateNameAndPropertySignature.ts, 0, 10))
}

interface B {
>B : Symbol(B, Decl(privateNameAndPropertySignature.ts, 2, 1))

    #foo: string;
>#foo : Symbol(B.#foo, Decl(privateNameAndPropertySignature.ts, 4, 13))
}

declare const x: {
>x : Symbol(x, Decl(privateNameAndPropertySignature.ts, 8, 13))

    #foo: number;
>#foo : Symbol(#foo, Decl(privateNameAndPropertySignature.ts, 8, 18))

    bar: {
>bar : Symbol(bar, Decl(privateNameAndPropertySignature.ts, 9, 17))

        #baz: string;
>#baz : Symbol(#baz, Decl(privateNameAndPropertySignature.ts, 10, 10))
    }
};

declare const y: [{ qux: { #quux: 3 } }];
>y : Symbol(y, Decl(privateNameAndPropertySignature.ts, 15, 13))
>qux : Symbol(qux, Decl(privateNameAndPropertySignature.ts, 15, 19))
>#quux : Symbol(#quux, Decl(privateNameAndPropertySignature.ts, 15, 26))


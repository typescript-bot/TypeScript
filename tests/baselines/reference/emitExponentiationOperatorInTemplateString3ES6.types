=== tests/cases/conformance/es7/exponentiationOperator/emitExponentiationOperatorInTemplateString3ES6.ts ===
var t1 = 10;
>t1 : number
>10 : 10

var t2 = 10;
>t2 : number
>10 : 10

var s;
>s : any

// With TemplateTail
`${t1 ** t2} world`;
>`${t1 ** t2} world` : `${number} world`
>t1 ** t2 : number
>t1 : number
>t2 : number

`${t1 ** t2 ** t1} world`;
>`${t1 ** t2 ** t1} world` : `${number} world`
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 + t2 ** t1} world`;
>`${t1 + t2 ** t1} world` : `${number} world`
>t1 + t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 ** t2 + t1} world`;
>`${t1 ** t2 + t1} world` : `${number} world`
>t1 ** t2 + t1 : number
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 : number

`${t1 + t2 ** t2 + t1 } world`;
>`${t1 + t2 ** t2 + t1 } world` : `${number} world`
>t1 + t2 ** t2 + t1 : number
>t1 + t2 ** t2 : number
>t1 : number
>t2 ** t2 : number
>t2 : number
>t2 : number
>t1 : number

`${typeof (t1 ** t2 ** t1) } world`;
>`${typeof (t1 ** t2 ** t1) } world` : "string world" | "number world" | "bigint world" | "boolean world" | "symbol world" | "undefined world" | "object world" | "function world"
>typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>(t1 ** t2 ** t1) : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${1 + typeof (t1 ** t2 ** t1) } world`;
>`${1 + typeof (t1 ** t2 ** t1) } world` : `${string} world`
>1 + typeof (t1 ** t2 ** t1) : string
>1 : 1
>typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>(t1 ** t2 ** t1) : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 ** t2}${t1 ** t2} world`;
>`${t1 ** t2}${t1 ** t2} world` : `${number}${number} world`
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 ** t2 : number
>t1 : number
>t2 : number

`${t1 ** t2 ** t1}${t1 ** t2 ** t1} world`;
>`${t1 ** t2 ** t1}${t1 ** t2 ** t1} world` : `${number}${number} world`
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 + t2 ** t1}${t1 + t2 ** t1} world`;
>`${t1 + t2 ** t1}${t1 + t2 ** t1} world` : `${number}${number} world`
>t1 + t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number
>t1 + t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 ** t2 + t1}${t1 ** t2 + t1} world`;
>`${t1 ** t2 + t1}${t1 ** t2 + t1} world` : `${number}${number} world`
>t1 ** t2 + t1 : number
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 : number
>t1 ** t2 + t1 : number
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 : number

`${t1 + t2 ** t2 + t1}${t1 + t2 ** t2 + t1} world`;
>`${t1 + t2 ** t2 + t1}${t1 + t2 ** t2 + t1} world` : `${number}${number} world`
>t1 + t2 ** t2 + t1 : number
>t1 + t2 ** t2 : number
>t1 : number
>t2 ** t2 : number
>t2 : number
>t2 : number
>t1 : number
>t1 + t2 ** t2 + t1 : number
>t1 + t2 ** t2 : number
>t1 : number
>t2 ** t2 : number
>t2 : number
>t2 : number
>t1 : number

`${typeof (t1 ** t2 ** t1) }${typeof (t1 ** t2 ** t1) } world`;
>`${typeof (t1 ** t2 ** t1) }${typeof (t1 ** t2 ** t1) } world` : "stringstring world" | "stringnumber world" | "stringbigint world" | "stringboolean world" | "stringsymbol world" | "stringundefined world" | "stringobject world" | "stringfunction world" | "numberstring world" | "numbernumber world" | "numberbigint world" | "numberboolean world" | "numbersymbol world" | "numberundefined world" | "numberobject world" | "numberfunction world" | "bigintstring world" | "bigintnumber world" | "bigintbigint world" | "bigintboolean world" | "bigintsymbol world" | "bigintundefined world" | "bigintobject world" | "bigintfunction world" | "booleanstring world" | "booleannumber world" | "booleanbigint world" | "booleanboolean world" | "booleansymbol world" | "booleanundefined world" | "booleanobject world" | "booleanfunction world" | "symbolstring world" | "symbolnumber world" | "symbolbigint world" | "symbolboolean world" | "symbolsymbol world" | "symbolundefined world" | "symbolobject world" | "symbolfunction world" | "undefinedstring world" | "undefinednumber world" | "undefinedbigint world" | "undefinedboolean world" | "undefinedsymbol world" | "undefinedundefined world" | "undefinedobject world" | "undefinedfunction world" | "objectstring world" | "objectnumber world" | "objectbigint world" | "objectboolean world" | "objectsymbol world" | "objectundefined world" | "objectobject world" | "objectfunction world" | "functionstring world" | "functionnumber world" | "functionbigint world" | "functionboolean world" | "functionsymbol world" | "functionundefined world" | "functionobject world" | "functionfunction world"
>typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>(t1 ** t2 ** t1) : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number
>typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>(t1 ** t2 ** t1) : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 ** t2} hello world ${t1 ** t2} !!`;
>`${t1 ** t2} hello world ${t1 ** t2} !!` : `${number} hello world ${number} !!`
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 ** t2 : number
>t1 : number
>t2 : number

`${t1 ** t2 ** t1} hello world ${t1 ** t2 ** t1} !!`;
>`${t1 ** t2 ** t1} hello world ${t1 ** t2 ** t1} !!` : `${number} hello world ${number} !!`
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 + t2 ** t1} hello world ${t1 + t2 ** t1} !!`;
>`${t1 + t2 ** t1} hello world ${t1 + t2 ** t1} !!` : `${number} hello world ${number} !!`
>t1 + t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number
>t1 + t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

`${t1 ** t2 + t1} hello world ${t1 ** t2 + t1} !!`;
>`${t1 ** t2 + t1} hello world ${t1 ** t2 + t1} !!` : `${number} hello world ${number} !!`
>t1 ** t2 + t1 : number
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 : number
>t1 ** t2 + t1 : number
>t1 ** t2 : number
>t1 : number
>t2 : number
>t1 : number

`${t1 + t2 ** t2 + t1} hello world ${t1 + t2 ** t2 + t1} !!`;
>`${t1 + t2 ** t2 + t1} hello world ${t1 + t2 ** t2 + t1} !!` : `${number} hello world ${number} !!`
>t1 + t2 ** t2 + t1 : number
>t1 + t2 ** t2 : number
>t1 : number
>t2 ** t2 : number
>t2 : number
>t2 : number
>t1 : number
>t1 + t2 ** t2 + t1 : number
>t1 + t2 ** t2 : number
>t1 : number
>t2 ** t2 : number
>t2 : number
>t2 : number
>t1 : number

`${typeof (t1 ** t2 ** t1) } hello world ${typeof (t1 ** t2 ** t1)} !!`;
>`${typeof (t1 ** t2 ** t1) } hello world ${typeof (t1 ** t2 ** t1)} !!` : "string hello world string !!" | "string hello world number !!" | "string hello world bigint !!" | "string hello world boolean !!" | "string hello world symbol !!" | "string hello world undefined !!" | "string hello world object !!" | "string hello world function !!" | "number hello world string !!" | "number hello world number !!" | "number hello world bigint !!" | "number hello world boolean !!" | "number hello world symbol !!" | "number hello world undefined !!" | "number hello world object !!" | "number hello world function !!" | "bigint hello world string !!" | "bigint hello world number !!" | "bigint hello world bigint !!" | "bigint hello world boolean !!" | "bigint hello world symbol !!" | "bigint hello world undefined !!" | "bigint hello world object !!" | "bigint hello world function !!" | "boolean hello world string !!" | "boolean hello world number !!" | "boolean hello world bigint !!" | "boolean hello world boolean !!" | "boolean hello world symbol !!" | "boolean hello world undefined !!" | "boolean hello world object !!" | "boolean hello world function !!" | "symbol hello world string !!" | "symbol hello world number !!" | "symbol hello world bigint !!" | "symbol hello world boolean !!" | "symbol hello world symbol !!" | "symbol hello world undefined !!" | "symbol hello world object !!" | "symbol hello world function !!" | "undefined hello world string !!" | "undefined hello world number !!" | "undefined hello world bigint !!" | "undefined hello world boolean !!" | "undefined hello world symbol !!" | "undefined hello world undefined !!" | "undefined hello world object !!" | "undefined hello world function !!" | "object hello world string !!" | "object hello world number !!" | "object hello world bigint !!" | "object hello world boolean !!" | "object hello world symbol !!" | "object hello world undefined !!" | "object hello world object !!" | "object hello world function !!" | "function hello world string !!" | "function hello world number !!" | "function hello world bigint !!" | "function hello world boolean !!" | "function hello world symbol !!" | "function hello world undefined !!" | "function hello world object !!" | "function hello world function !!"
>typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>(t1 ** t2 ** t1) : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number
>typeof (t1 ** t2 ** t1) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>(t1 ** t2 ** t1) : number
>t1 ** t2 ** t1 : number
>t1 : number
>t2 ** t1 : number
>t2 : number
>t1 : number

